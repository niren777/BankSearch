{"version":3,"sources":["modules/action.js","components/Home.js","components/Favourite.js","modules/reducer.js","App.js","modules/store.js","serviceWorker.js","index.js"],"names":["Types","ADD_BANKS","SAVE_SELECTED_CITY","modules_action","banks","type","payload","city","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","customTotal","from","to","size","react_default","a","createElement","className","sizePerPageList","text","value","bankProperties","dataField","state","selectedCity","filteredBanks","favouriteBanks","selectedFilter","selectedFilterName","setState","props","getBanks","tempFavouriteBanks","JSON","parse","localStorage","getItem","endItem","selectedPagination","filteredBanksByPagination","slice","map","favouriteBank","bank","ifsc","favourite","_this2","selectedCityObj","cities","filter","cityObj","length","axios","get","then","res","markFaviourites","data","retrivedBanks","addBanks","catch","error","console","log","event","_this3","key","enteredKey","target","tempFilteredBanks","bankObj","regexExp","RegExp","match","savedBank","push","bankIndex","findIndex","splice","tempState","objectSpread","setItem","stringify","setSelectedCity","_this4","Dropdown","Item","onSelect","item","handleCityDropdownChange","eventKey","c","d","innerHTML","_this5","field","handleFilterDropdownChange","index","_this6","Button","variant","onClick","handleFavouriteChange","_this7","options","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","showTotal","paginationTotalRenderer","columns","sort","formatter","obj","favouriteButton","Container","Row","Col","lg","Toggle","id","Menu","renderCityOptions","renderFilterOptions","InputGroup","FormControl","placeholder","aria-label","onKeyPress","handleSearchBoxChange","react_router_dom","lib_default","keyField","pagination","paginationFactory","Component","connect","dispatch","ACTIONS","Favourite","nextPageTitle","prePageTitle","firstPageTitle","lastPageTitle","defaultState","bankReducer","arguments","undefined","action","newState","_","cloneDeep","initialState","reduxStore","window","REDUX_INITIAL_DATA","createStore","reducer","applyMiddleware","logger","App","es","store","basename","react_router","exact","path","component","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59927b1d.chunk.js","sourcesContent":["// types of action\nconst Types = {\n  ADD_BANKS: \"ADD_BANKS\",\n  SAVE_SELECTED_CITY: \"SAVE_SELECTED_CITY\"\n};\n// actions\nconst addBanks = banks => ({\n  type: Types.ADD_BANKS,\n  payload: banks\n});\nconst setSelectedCity = city => ({\n  type: Types.SAVE_SELECTED_CITY,\n  payload: city\n});\n\nexport default {\n  addBanks,\n  setSelectedCity,\n  Types\n};","import React, {Component} from \"react\";\nimport axios from \"axios\";\nimport PropTypes from 'prop-types'\nimport { Dropdown, InputGroup, FormControl,\n    Col, Button, Row, Container } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport { Link } from \"react-router-dom\";\nimport ACTIONS from \"../modules/action\";\nimport { connect } from \"react-redux\";\n\nclass Home extends Component {\n    static propTypes = {\n        addBanks: PropTypes.func.isRequired,\n        cities: PropTypes.object.isRequired\n    }\n    constructor(){\n        super();\n        this.sizePerPageList = [{\n            text: '5', value: 5\n        }, {\n            text: '10', value: 10\n        }, {\n            text: '20', value: 20\n        }]\n        this.bankProperties = [{\n              dataField: \"bank_name\",\n              text: \"Bank Name\"\n            },\n            {\n              dataField: \"ifsc\",\n              text: \"IFSC\"\n            },\n            {\n              dataField: \"branch\",\n              text: \"Branch\"\n            },\n            {\n              dataField: \"address\",\n              text: \"Address\"\n            },\n            {\n              dataField: \"district\",\n              text: \"District\"\n            },\n            {\n              dataField: \"state\",\n              text: \"State\"\n            }\n        ]\n        this.state={\n            selectedCity: '',\n            filteredBanks: [],\n            favouriteBanks: [],\n            selectedFilter: '',\n            selectedFilterName: 'Select Filter'\n        }\n    }\n    componentDidMount() {\n        this.setState({selectedCity: this.props.selectedCity})\n        this.props.selectedCity !== 'Select City' && this.getBanks(this.props.selectedCity)\n        var tempFavouriteBanks = JSON.parse(localStorage.getItem('favouriteBanks'))\n        tempFavouriteBanks && this.setState({favouriteBanks: tempFavouriteBanks})\n    }\n    filterBanksBasedOnPagination(filteredBanks) {\n        var startItem = 0\n        var endItem = startItem + this.state.selectedPagination;\n        var filteredBanksByPagination = filteredBanks.slice(startItem, endItem)\n        this.setState({filteredBanks: filteredBanksByPagination})\n    }\n    markFaviourites(banks){\n        var tempFavouriteBanks = JSON.parse(localStorage.getItem('favouriteBanks'))\n        if (tempFavouriteBanks) {\n            this.setState({favouriteBanks: tempFavouriteBanks})\n            this.state.favouriteBanks.map(favouriteBank => {\n                banks.map(bank => {\n                    if(bank.ifsc === favouriteBank.ifsc )\n                        bank.favourite = true;\n                })\n            })\n        }\n    }\n    getBanks(city) {\n        var selectedCityObj = this.props.cities.filter(cityObj => {return cityObj.city === city})[0]   \n        if(selectedCityObj.banks.length === 0) {\n            axios.get(\"https://vast-shore-74260.herokuapp.com/banks?city=\"+city).then((res)=>{\n                //on success\n                this.markFaviourites(res.data)\n                var retrivedBanks = {\n                    city: city,\n                    banks: res.data\n                }\n                this.props.addBanks(retrivedBanks)\n                this.setState({filteredBanks: res.data})\n            }).catch((error)=>{\n                //on error\n                console.log(error)\n            });\n        } else {\n           this.setState({filteredBanks: selectedCityObj.banks})\n        }\n    }\n    handleSearchBoxChange(event){\n        if(event.key === 'Enter' && this.state.selectedFilter !== '') {\n            var enteredKey = event.target.value;\n            var selectedCityObj = this.props.cities.filter(cityObj => {return cityObj.city === this.state.selectedCity})[0]  \n            if (selectedCityObj) {\n                if(enteredKey !== ''){\n                    var tempFilteredBanks = selectedCityObj.banks.filter(bankObj => {\n                        var regexExp = new RegExp(enteredKey, 'i')\n                        return bankObj[this.state.selectedFilter].match(regexExp)})\n                    this.setState({filteredBanks: tempFilteredBanks})\n                } else {\n                    this.setState({filteredBanks: selectedCityObj.banks})\n                }\n            }\n        }\n    }\n    handleFavouriteChange(event){\n        var savedBank = this.state.filteredBanks.filter(bankObj => {return bankObj.ifsc === event.target.value})[0]\n        savedBank.favourite = !savedBank.favourite;\n        if(savedBank.favourite) {\n            this.state.favouriteBanks.push(savedBank)\n        } else {\n            var bankIndex = this.state.favouriteBanks.findIndex(bank => bank.ifsc === event.target.value)\n            this.state.favouriteBanks.splice(bankIndex, 1)\n        }\n        var tempState = {...this.state}\n        this.setState({tempState})\n        localStorage.setItem('favouriteBanks', JSON.stringify(this.state.favouriteBanks))\n    }\n    handleCityDropdownChange(selectedCity) {\n        this.setState({selectedCity: selectedCity})\n        this.props.setSelectedCity(selectedCity)\n        this.getBanks(selectedCity)\n    }\n    renderCityOptions() {\n        return this.props.cities.map( city => {\n            return (<Dropdown.Item onSelect={(item)=>this.handleCityDropdownChange(item)} eventKey={city.city}>{city.city}</Dropdown.Item>)\n        })\n    }\n    handleFilterDropdownChange(selectedFilter, event, c, d){\n        console.log(selectedFilter, event.target.innerHTML)\n        this.setState({selectedFilter: selectedFilter})\n        this.setState({selectedFilterName: event.target.innerHTML})\n    }\n    renderFilterOptions() {\n        return this.bankProperties.map( field => {\n            return (<Dropdown.Item onSelect={(item, event)=>this.handleFilterDropdownChange(item, event)} eventKey={field.dataField}>{field.text}</Dropdown.Item>)\n        })\n    }\n    customTotal = (from, to, size) => (\n        <span className=\"react-bootstrap-table-pagination-total\">\n            Showing { from } to { to } of { size } Results\n        </span>\n    )\n    favouriteButton(bank, index){\n        return <Button value={bank.ifsc} variant={bank.favourite?\"primary\":\"outline-primary\"}\n                onClick={(item)=>this.handleFavouriteChange(item)}>\n                Favourite\n            </Button>\n    }\n\n    render() {\n        var options = {\n            paginationSize: 4,\n            pageStartIndex: 0,\n            firstPageText: 'First',\n            prePageText: 'Back',\n            nextPageText: 'Next',\n            lastPageText: 'Last',\n            showTotal: true,\n            paginationTotalRenderer: this.customTotal,\n            sizePerPageList: this.sizePerPageList\n        }\n\n        var columns = [\n            {\n              dataField: \"favourite\",\n              text: \"Favourite\",\n              sort: true,\n              formatter: (a, obj, index)=>{return this.favouriteButton(obj, index)},\n            },\n            {\n                dataField: \"bank_id\",\n                text: \"Bank ID\",\n                sort: true\n            },\n            {\n                dataField: \"bank_name\",\n                text: \"Bank Name\",\n                sort: true\n            },\n            {\n                dataField: \"ifsc\",\n                text: \"IFSC\",\n                sort: true\n            },\n            {\n                dataField: \"branch\",\n                text: \"Branch\",\n                sort: true\n            },\n            {\n                dataField: \"address\",\n                text: \"Address\",\n                sort: true\n            },\n            {\n                dataField: \"city\",\n                text: \"City\",\n                sort: true\n            },\n            {\n                dataField: \"district\",\n                text: \"District\",\n                sort: true\n            },\n            {\n                dataField: \"state\",\n                text: \"State\",\n                sort: true\n            }\n        ]\n        \n        return (\n            <Container className=\"mt-5\">\n                <Row>\n                    <Col lg=\"2\">\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"success\" id=\"city-dropdown\">\n                                {this.state.selectedCity}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu >{this.renderCityOptions()}</Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col lg=\"8\">\n                    <Row>\n                        <Col lg=\"1\">\n                            Search By:\n                        </Col>\n                        <Col lg=\"3\">\n                            <Dropdown>\n                                <Dropdown.Toggle variant=\"success\" id=\"city-dropdown\">\n                                    {this.state.selectedFilterName}\n                                </Dropdown.Toggle>\n                                <Dropdown.Menu >{this.renderFilterOptions()}</Dropdown.Menu>\n                            </Dropdown>\n                        </Col>\n                        <Col lg=\"8\">\n                            <InputGroup className=\"mb-3\">\n                                <FormControl\n                                placeholder=\"Search...\"\n                                aria-label=\"Search\"\n                                onKeyPress={(item)=>this.handleSearchBoxChange(item)}\n                                />\n                            </InputGroup>\n                        </Col>\n                    </Row>\n                    </Col>\n                    <Col lg=\"2\" className=\"ml-0\">\n                        <Link to={`/favourite`}><Button variant=\"outline-primary\">Favourites</Button></Link>\n                    </Col>\n                </Row>\n\n                <BootstrapTable \n                    keyField='ifsc' \n                    data={ this.state.filteredBanks } \n                    pagination={ paginationFactory(options) } \n                    columns={columns}\n                />\n            </Container>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    cities: state.cities,\n    selectedCity: state.selectedCity\n});\n\nconst mapDispatchToProps = dispatch => ({\n    addBanks: banks => dispatch(ACTIONS.addBanks(banks)),\n    setSelectedCity: city => dispatch(ACTIONS.setSelectedCity(city))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home);\n","import React, {Component} from \"react\";\nimport { Col, Row, Container, Button } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport { Link } from \"react-router-dom\";\n\nclass Favourite extends Component {\n\n    constructor(){\n        super();\n        this.sizePerPageList = [{\n            text: '5', value: 5\n        }, {\n            text: '10', value: 10\n        }]\n        var tempFavouriteBanks = JSON.parse(localStorage.getItem('favouriteBanks'))\n        this.state={\n            favouriteBanks: tempFavouriteBanks || []\n        }\n    }\n    customTotal = (from, to, size) => (\n        <span className=\"react-bootstrap-table-pagination-total\">\n            Showing { from } to { to } of { size } Results\n        </span>\n    )\n    render() {\n        var options = {\n            paginationSize: 4,\n            pageStartIndex: 0,\n            // alwaysShowAllBtns: true, // Always show next and previous button\n            // withFirstAndLast: false, // Hide the going to First and Last page button\n            // hideSizePerPage: true, // Hide the sizePerPage dropdown always\n            // hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\n            firstPageText: 'First',\n            prePageText: 'Back',\n            nextPageText: 'Next',\n            lastPageText: 'Last',\n            nextPageTitle: 'First page',\n            prePageTitle: 'Pre page',\n            firstPageTitle: 'Next page',\n            lastPageTitle: 'Last page',\n            showTotal: true,\n            paginationTotalRenderer: this.customTotal,\n            sizePerPageList: this.sizePerPageList\n        }\n\n        var columns = [\n            {\n              dataField: \"bank_id\",\n              text: \"Bank ID\",\n              sort: true\n            },\n            {\n              dataField: \"bank_name\",\n              text: \"Bank Name\",\n              sort: true\n            },\n            {\n              dataField: \"ifsc\",\n              text: \"IFSC\",\n              sort: true\n            },\n            {\n              dataField: \"branch\",\n              text: \"Branch\",\n              sort: true\n            },\n            {\n              dataField: \"address\",\n              text: \"Address\",\n              sort: true\n            },\n            {\n              dataField: \"city\",\n              text: \"City\",\n              sort: true\n            },\n            {\n              dataField: \"district\",\n              text: \"District\",\n              sort: true\n            },\n            {\n              dataField: \"state\",\n              text: \"State\",\n              sort: true\n            }\n        ]\n        return ( \n            <Container className=\"mt-5\">\n                <Row>\n                    <Col>\n                        <Link to={`/`}><Button variant=\"outline-primary\">Home</Button></Link>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"mt-3\">\n                        <BootstrapTable \n                            keyField='ifsc'\n                            data={ this.state.favouriteBanks } \n                            pagination={ paginationFactory(options) } \n                            columns={columns}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default Favourite;","import ACTIONS from \"./action\";\nimport _ from \"lodash\";\n\nconst defaultState = {\n  cities: [{\n    city: 'MUMBAI',\n    banks: []\n  },{\n    city: 'CHENNAI',\n    banks: []\n  },{\n    city: 'KOLKATA',\n    banks: []\n  },{\n    city: 'BANGALORE',\n    banks: []\n  },{\n    city: 'DELHI',\n    banks: []\n  }],\n  selectedCity: 'Select City'\n};\n\nconst bankReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case ACTIONS.Types.ADD_BANKS: {\n      console.log(action);\n\n      let city = action.payload;\n      let newState = _.cloneDeep(state);\n      var filteredCityObj = newState.cities.filter(cityObj => {return cityObj.city === city.city})[0]\n      filteredCityObj.banks = city.banks\n      return newState;\n    }\n\n    case ACTIONS.Types.SAVE_SELECTED_CITY: {\n      state.selectedCity = action.payload\n      return state\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default bankReducer;","import React from 'react';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport './App.css';\nimport Home from './components/Home';\nimport Favourite from './components/Favourite';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport configureStore from \"./modules/store\";\n\nconst reduxStore = configureStore(window.REDUX_INITIAL_DATA);\n\nfunction App() {\n  return (\n    <ReduxProvider store={reduxStore}>\n      <Router basename=\"/BankSearch\" >\n        <div>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/favourite\" component={Favourite} />\n        </div>\n      </Router>\n    </ReduxProvider>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from \"redux\";\n\n// Logger with default options\nimport logger from \"redux-logger\";\n\nimport reducer from \"./reducer\";\n\nexport default function configureStore(initialState) {\n  const store = createStore(reducer, initialState, applyMiddleware(logger));\n  return store;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}