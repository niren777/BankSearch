{"version":3,"sources":["components/Home.js","components/Favourite.js","App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","customTotal","from","to","size","react_default","a","createElement","className","cities","city","banks","sizePerPageList","text","value","state","selectedCity","filteredBanks","favouriteBanks","endItem","selectedPagination","filteredBanksByPagination","slice","setState","JSON","parse","localStorage","getItem","map","favouriteBank","bank","ifsc","favourite","_this2","selectedCityObj","filter","cityObj","length","axios","get","then","res","markFaviourites","data","catch","error","console","log","event","_this3","target","keyCode","key","enteredKey","tempFilteredBanks","bankObj","regexExp","RegExp","match","savedBank","push","bankIndex","findIndex","splice","setItem","stringify","tempState","objectSpread","selectedItem","getBanks","_this4","Dropdown","Item","onSelect","item","handleDropdownChange","eventKey","_this5","Button","variant","onClick","handleFavouriteChange","bank_id","bank_name","branch","address","district","index","_this6","_this7","options","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","nextPageTitle","prePageTitle","firstPageTitle","lastPageTitle","showTotal","paginationTotalRenderer","columns","dataField","sort","formatter","obj","favouriteButton","Container","Row","Col","lg","Toggle","id","Menu","renderCityOptions","InputGroup","FormControl","placeholder","aria-label","onKeyPress","handleSearchBoxChange","react_router_dom","lib_default","keyField","pagination","paginationFactory","Component","Favourite","react_router","exact","path","component","Home","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb1e4121.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport axios from \"axios\";\nimport { Dropdown, InputGroup, FormControl,\n    Col, Button, Row, Container } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport { Link } from \"react-router-dom\";\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.cities = [{\n            city: 'MUMBAI',\n            banks: []\n        },{\n            city: 'CHENNAI',\n            banks: []\n        }]\n        this.sizePerPageList = [{\n            text: '5', value: 5\n        }, {\n            text: '10', value: 10\n        }, {\n            text: '20', value: 20\n        }]\n        this.state={\n            selectedCity: 'Select City',\n            filteredBanks: [],\n            favouriteBanks: []\n        }\n    }\n    filterBanksBasedOnPagination(filteredBanks) {\n        var startItem = 0\n        var endItem = startItem + this.state.selectedPagination;\n        var filteredBanksByPagination = filteredBanks.slice(startItem, endItem)\n        this.setState({filteredBanks: filteredBanksByPagination})\n    }\n    markFaviourites(banks){\n        this.setState({favouriteBanks: JSON.parse(localStorage.getItem('favouriteBanks'))})\n        this.state.favouriteBanks.map(favouriteBank => {\n            banks.map(bank => {\n                if(bank.ifsc === favouriteBank.ifsc )\n                    bank.favourite = true;\n            })\n        })\n    }\n    getBanks(city) {\n        var selectedCityObj = this.cities.filter(cityObj => {return cityObj.city === city})[0]   \n        if(selectedCityObj.banks.length === 0) {\n            axios.get(\"https://vast-shore-74260.herokuapp.com/banks?city=\"+city).then((res)=>{\n                //on success\n                this.markFaviourites(res.data)\n                selectedCityObj.banks=res.data\n                this.setState({filteredBanks: res.data})\n                // this.filterBanksBasedOnPagination(res.data)\n            }).catch((error)=>{\n                //on error\n                console.log(error)\n            });\n        } else {\n           this.setState({filteredBanks: selectedCityObj.banks})\n            // this.filterBanksBasedOnPagination(selectedCityObj.banks)\n        }\n    }\n    handleSearchBoxChange(event){\n        console.log(event.target.keyCode)\n        console.log(event.key)\n        if(event.key === 'Enter') {\n            var enteredKey = event.target.value;\n            var selectedCityObj = this.cities.filter(cityObj => {return cityObj.city === this.state.selectedCity})[0]  \n            if (selectedCityObj) {\n                if(enteredKey !== ''){\n                    var tempFilteredBanks = selectedCityObj.banks.filter(bankObj => {\n                        var regexExp = new RegExp(enteredKey, 'i')\n                        return bankObj.ifsc.match(regexExp)})\n                    this.setState({filteredBanks: tempFilteredBanks})\n                    // this.filterBanksBasedOnPagination(tempFilteredBanks)\n                } else {\n                    this.setState({filteredBanks: selectedCityObj.banks})\n                    // this.filterBanksBasedOnPagination(selectedCityObj.banks)\n                }\n            }\n        }\n    }\n    handleFavouriteChange(event){\n        var savedBank = this.state.filteredBanks.filter(bankObj => {return bankObj.ifsc === event.target.value})[0]\n        savedBank.favourite = !savedBank.favourite;\n        console.log(savedBank.favourite)\n        if(savedBank.favourite) {\n            this.state.favouriteBanks.push(savedBank)\n        } else {\n            var bankIndex = this.state.favouriteBanks.findIndex(bank => bank.ifsc === event.target.value)\n            console.log(bankIndex)\n            console.log(event.target.value)\n            this.state.favouriteBanks.splice(bankIndex, 1)\n        }\n        // var favouriteBanks = JSON.parse(localStorage.getItem('favouriteBanks'))\n        // var filteredBank = favouriteBanks.filter(bank => {\n        //     return bank.ifsc === savedBank.ifsc\n        // })[0]\n        // if(!filteredBank){\n\n        // }\n        console.log(this.state.favouriteBanks)\n        localStorage.setItem('favouriteBanks', JSON.stringify(this.state.favouriteBanks))\n        var tempState = {...this.state}\n        this.setState({tempState})\n    }\n    handleDropdownChange(selectedItem) {\n        console.log(selectedItem)\n        this.setState({selectedCity: selectedItem})\n        this.getBanks(selectedItem)\n    }\n    renderCityOptions() {\n        console.log(this.state)\n        return this.cities.map( city => {\n            return (<Dropdown.Item onSelect={(item)=>this.handleDropdownChange(item)} eventKey={city.city}>{city.city}</Dropdown.Item>)\n        })\n    }\n    customTotal = (from, to, size) => (\n        <span className=\"react-bootstrap-table-pagination-total\">\n            Showing { from } to { to } of { size } Results\n        </span>\n    )\n    renderBanks(){\n        return this.state.filteredBanks.map(bank => {\n            return (\n                <tr>\n                    <td>\n                        <Button value={bank.ifsc} variant={bank.favourite?\"primary\":\"outline-primary\"}\n                            onClick={(item)=>this.handleFavouriteChange(item)}>\n                            Favourite\n                        </Button>\n                    </td>\n                    <td>{bank.bank_id}</td>\n                    <td>{bank.bank_name}</td>\n                    <td>{bank.ifsc}</td>\n                    <td>{bank.branch}</td>\n                    <td>{bank.address}</td>\n                    <td>{bank.city}</td>\n                    <td>{bank.district}</td>\n                    <td>{bank.state}</td>\n                </tr>\n            )\n        })\n    }\n    favouriteButton(bank, index){\n        return <Button value={bank.ifsc} variant={bank.favourite?\"primary\":\"outline-primary\"}\n                onClick={(item)=>this.handleFavouriteChange(item)}>\n                Favourite\n            </Button>\n    }\n\n    render() {\n        var options = {\n            paginationSize: 4,\n            pageStartIndex: 0,\n            // alwaysShowAllBtns: true, // Always show next and previous button\n            // withFirstAndLast: false, // Hide the going to First and Last page button\n            // hideSizePerPage: true, // Hide the sizePerPage dropdown always\n            // hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\n            firstPageText: 'First',\n            prePageText: 'Back',\n            nextPageText: 'Next',\n            lastPageText: 'Last',\n            nextPageTitle: 'First page',\n            prePageTitle: 'Pre page',\n            firstPageTitle: 'Next page',\n            lastPageTitle: 'Last page',\n            showTotal: true,\n            paginationTotalRenderer: this.customTotal,\n            sizePerPageList: this.sizePerPageList\n        }\n\n        var columns = [\n            {\n              dataField: \"favourite\",\n              text: \"Favourite\",\n              sort: true,\n              formatter: (a, obj, index)=>{return this.favouriteButton(obj, index)},\n            },\n            {\n              dataField: \"bank_id\",\n              text: \"Bank ID\",\n              sort: true\n            },\n            {\n              dataField: \"bank_name\",\n              text: \"Bank Name\",\n              sort: true\n            },\n            {\n              dataField: \"ifsc\",\n              text: \"IFSC\",\n              sort: true\n            },\n            {\n              dataField: \"branch\",\n              text: \"Branch\",\n              sort: true\n            },\n            {\n              dataField: \"address\",\n              text: \"Address\",\n              sort: true\n            },\n            {\n              dataField: \"city\",\n              text: \"City\",\n              sort: true\n            },\n            {\n              dataField: \"district\",\n              text: \"District\",\n              sort: true\n            },\n            {\n              dataField: \"state\",\n              text: \"State\",\n              sort: true\n            }\n        ]\n        \n        return (\n            <Container className=\"mt-5\">\n                <Row>\n                    <Col lg=\"2\">\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"success\" id=\"city-dropdown\">\n                                {this.state.selectedCity}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu >{this.renderCityOptions()}</Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col lg=\"6\">\n                        <InputGroup className=\"mb-3\">\n                            <FormControl\n                            placeholder=\"Search...\"\n                            aria-label=\"Search\"\n                            onKeyPress={(item)=>this.handleSearchBoxChange(item)}\n                            />\n                        </InputGroup>\n                    </Col>\n                    <Col lg=\"4\" className=\"ml-0\">\n                        <Link to={`/favourite`}><Button variant=\"outline-primary\">Favourites</Button></Link>\n                    </Col>\n                </Row>\n                {/* <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Favourite</th>\n                            <th>Bank ID</th>\n                            <th>Bank Name</th>\n                            <th>IFSC</th>\n                            <th>Branch</th>\n                            <th>Address</th>\n                            <th>City</th>\n                            <th>District</th>\n                            <th>State</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.renderBanks()}\n                    </tbody>\n                </Table> */}\n\n                <BootstrapTable \n                    keyField='ifsc' \n                    data={ this.state.filteredBanks } \n                    pagination={ paginationFactory(options) } \n                    columns={columns}\n                />\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","import React, {Component} from \"react\";\nimport { Col, Row, Container, Button } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport { Link } from \"react-router-dom\";\n\nclass Favourite extends Component {\n\n    constructor(){\n        super();\n        this.sizePerPageList = [{\n            text: '5', value: 5\n        }, {\n            text: '10', value: 10\n        }]\n        this.state={\n            favouriteBanks: JSON.parse(localStorage.getItem('favouriteBanks'))\n        }\n    }\n    customTotal = (from, to, size) => (\n        <span className=\"react-bootstrap-table-pagination-total\">\n            Showing { from } to { to } of { size } Results\n        </span>\n    )\n    render() {\n        var options = {\n            paginationSize: 4,\n            pageStartIndex: 0,\n            // alwaysShowAllBtns: true, // Always show next and previous button\n            // withFirstAndLast: false, // Hide the going to First and Last page button\n            // hideSizePerPage: true, // Hide the sizePerPage dropdown always\n            // hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\n            firstPageText: 'First',\n            prePageText: 'Back',\n            nextPageText: 'Next',\n            lastPageText: 'Last',\n            nextPageTitle: 'First page',\n            prePageTitle: 'Pre page',\n            firstPageTitle: 'Next page',\n            lastPageTitle: 'Last page',\n            showTotal: true,\n            paginationTotalRenderer: this.customTotal,\n            sizePerPageList: this.sizePerPageList\n        }\n\n        var columns = [\n            {\n              dataField: \"bank_id\",\n              text: \"Bank ID\",\n              sort: true\n            },\n            {\n              dataField: \"bank_name\",\n              text: \"Bank Name\",\n              sort: true\n            },\n            {\n              dataField: \"ifsc\",\n              text: \"IFSC\",\n              sort: true\n            },\n            {\n              dataField: \"branch\",\n              text: \"Branch\",\n              sort: true\n            },\n            {\n              dataField: \"address\",\n              text: \"Address\",\n              sort: true\n            },\n            {\n              dataField: \"city\",\n              text: \"City\",\n              sort: true\n            },\n            {\n              dataField: \"district\",\n              text: \"District\",\n              sort: true\n            },\n            {\n              dataField: \"state\",\n              text: \"State\",\n              sort: true\n            }\n        ]\n        return ( \n            <Container className=\"mt-5\">\n                <Row>\n                    <Col>\n                        <Link to={`/`}><Button variant=\"outline-primary\">Home</Button></Link>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"mt-3\">\n                        <BootstrapTable \n                            keyField='ifsc'\n                            data={ this.state.favouriteBanks } \n                            pagination={ paginationFactory(options) } \n                            columns={columns}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default Favourite;","import React from 'react';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport './App.css';\nimport Home from './components/Home';\nimport Favourite from './components/Favourite';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/favourite\" component={Favourite} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}